// vulnerability-scanner.ts
'use server';
/**
 * @fileOverview A vulnerability scanner AI agent for C++ code.
 *
 * - vulnerabilityScanner - A function that handles the vulnerability scanning process.
 * - VulnerabilityScannerInput - The input type for the vulnerabilityScanner function.
 * - VulnerabilityScannerOutput - The return type for the vulnerabilityScanner function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const VulnerabilityScannerInputSchema = z.object({
  cppCode: z
    .string()
    .describe('The C++ code to scan for vulnerabilities.'),
});
export type VulnerabilityScannerInput = z.infer<typeof VulnerabilityScannerInputSchema>;

const VulnerabilityScannerOutputSchema = z.object({
  vulnerabilities: z.array(
    z.object({
      description: z.string().describe('Description of the vulnerability.'),
      location: z.string().describe('The location of the vulnerability in the code.'),
      severity: z.string().describe('The severity of the vulnerability (e.g., critical, high, medium, low).'),
      suggestedFix: z.string().describe('Suggested fix for the vulnerability, including code example.'),
    })
  ).describe('A list of vulnerabilities found in the C++ code.'),
  improvements: z.array(
    z.object({
      description: z.string().describe('Description of the improvement.'),
      location: z.string().describe('The location of the improvement in the code.'),
      suggestedCode: z.string().describe('Suggested code for the improvement.'),
    })
  ).describe('A list of potential improvements in the C++ code.'),
});
export type VulnerabilityScannerOutput = z.infer<typeof VulnerabilityScannerOutputSchema>;

export async function vulnerabilityScanner(input: VulnerabilityScannerInput): Promise<VulnerabilityScannerOutput> {
  return vulnerabilityScannerFlow(input);
}

const prompt = ai.definePrompt({
  name: 'vulnerabilityScannerPrompt',
  input: {schema: VulnerabilityScannerInputSchema},
  output: {schema: VulnerabilityScannerOutputSchema},
  prompt: `You are a world-class security expert and C++ static analysis tool. Your capabilities rival the most advanced security scanners. Your purpose is to conduct a comprehensive security audit of the provided C++ code.

You will receive C++ code as input. Your task is to perform a deep analysis to identify any potential security vulnerabilities, no matter how subtle. For each vulnerability found, you must:
1.  Provide a clear and detailed description of the vulnerability.
2.  Specify the exact location (e.g., line number, function) in the code.
3.  Classify its severity (critical, high, medium, low).
4.  Provide a suggested fix with a corrected code example.

Your analysis should cover, but is not limited to, the following categories:
- Buffer Overflows (e.g., gets, strcpy)
- Integer Overflows
- Memory Leaks
- Use-after-free, double-free, and other memory corruption issues
- Format String Vulnerabilities
- Race Conditions
- Insecure use of cryptography
- Uninitialized variables
- Pointer and array issues
- Input validation flaws (e.g., leading to command injection)
- Path traversal vulnerabilities

In addition to security vulnerabilities, you will also identify potential improvements in the code. These improvements should focus on performance, readability, and modern C++ best practices, aiming to minimize lines and memory usage while preserving the original logic and syntax.

Analyze the following C++ code with maximum scrutiny:

\`\`\`cpp
{{{cppCode}}}
\`\`\``,
});

const vulnerabilityScannerFlow = ai.defineFlow(
  {
    name: 'vulnerabilityScannerFlow',
    inputSchema: VulnerabilityScannerInputSchema,
    outputSchema: VulnerabilityScannerOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
