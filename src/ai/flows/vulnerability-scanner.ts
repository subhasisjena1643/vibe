// vulnerability-scanner.ts
'use server';
/**
 * @fileOverview A vulnerability scanner AI agent for Python code.
 *
 * - vulnerabilityScanner - A function that handles the vulnerability scanning process.
 * - VulnerabilityScannerInput - The input type for the vulnerabilityScanner function.
 * - VulnerabilityScannerOutput - The return type for the vulnerabilityScanner function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const VulnerabilityScannerInputSchema = z.object({
  pythonCode: z
    .string()
    .describe('The Python code to scan for vulnerabilities.'),
});
export type VulnerabilityScannerInput = z.infer<typeof VulnerabilityScannerInputSchema>;

const VulnerabilityScannerOutputSchema = z.object({
  vulnerabilities: z.array(
    z.object({
      description: z.string().describe('Description of the vulnerability.'),
      location: z.string().describe('The location of the vulnerability in the code.'),
      severity: z.string().describe('The severity of the vulnerability (e.g., high, medium, low).'),
      suggestedFix: z.string().describe('Suggested fix for the vulnerability, including code example.'),
    })
  ).describe('A list of vulnerabilities found in the Python code.'),
  improvements: z.array(
    z.object({
      description: z.string().describe('Description of the improvement.'),
      location: z.string().describe('The location of the improvement in the code.'),
      suggestedCode: z.string().describe('Suggested code for the improvement.'),
    })
  ).describe('A list of potential improvements in the Python code.'),
});
export type VulnerabilityScannerOutput = z.infer<typeof VulnerabilityScannerOutputSchema>;

export async function vulnerabilityScanner(input: VulnerabilityScannerInput): Promise<VulnerabilityScannerOutput> {
  return vulnerabilityScannerFlow(input);
}

const prompt = ai.definePrompt({
  name: 'vulnerabilityScannerPrompt',
  input: {schema: VulnerabilityScannerInputSchema},
  output: {schema: VulnerabilityScannerOutputSchema},
  prompt: `You are a security expert specializing in identifying vulnerabilities and potential improvements in Python code.

You will receive Python code as input and will need to identify any potential security vulnerabilities, classify their severity (high, medium, low), explain the vulnerability, its location in the code, and provide a suggested fix.

You will also automatically identify potential improvements in the code, without being asked. These improvements should minimize lines and memory usage while preserving logic and syntax of Python code.

Analyze the following Python code for vulnerabilities and improvements:

\`\`\`python
{{{pythonCode}}}
\`\`\``,
});

const vulnerabilityScannerFlow = ai.defineFlow(
  {
    name: 'vulnerabilityScannerFlow',
    inputSchema: VulnerabilityScannerInputSchema,
    outputSchema: VulnerabilityScannerOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
